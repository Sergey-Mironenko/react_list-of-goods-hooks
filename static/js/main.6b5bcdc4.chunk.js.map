{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortType","setSortType","isReversed","setIsReversed","reorderedGoods","goods","visibleGoods","sort","good1","good2","localeCompare","length","reverse","getReorderedGoods","className","type","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAUMC,EAtCD,SACLC,EACAL,EACAE,GAEA,IAAMI,EAAY,YAAOD,GAkBzB,OAhBAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQT,GACN,KAAK,EACH,OAAOQ,EAAME,cAAcD,GAC7B,KAAK,EACH,OAAOD,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAITT,GACFI,EAAaM,UAGRN,EAegBO,CACrBhB,EAAiBG,EAAUE,GAG7B,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,yBAAiC,IAAbd,GAAkB,YAC/CgB,QAlBe,kBAAMf,EAAY,IAenC,iCAQA,wBACEc,KAAK,SACLD,UAAS,4BAAoC,IAAbd,GAAkB,YAClDgB,QAzBa,kBAAMf,EAAY,IAsBjC,4BAQA,wBACEc,KAAK,SACLD,UAAS,6BAAwBZ,GAAc,YAC/Cc,QAhCQ,kBAAMb,GAAc,SAAAc,GAAO,OAAKA,MA6B1C,uBAQiB,IAAff,GAAqC,IAAbF,IACxB,wBACEe,KAAK,SACLD,UAAU,4BACVE,QAxCI,WACZf,EAAY,GACZE,GAAc,IAmCR,sBASJ,6BACGC,EAAec,KACd,SAAAC,GAAI,OAAI,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YCrG3BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6b5bcdc4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case 1:\n        return good1.localeCompare(good2);\n      case 2:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(0);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const sortByAlphabet = () => setSortType(1);\n  const sortByLength = () => setSortType(2);\n  const reverse = () => setIsReversed(current => !current);\n  const reset = () => {\n    setSortType(0);\n    setIsReversed(false);\n  };\n\n  const reorderedGoods = getReorderedGoods(\n    goodsFromServer, sortType, isReversed,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`button is-info ${sortType !== 1 && 'is-light'}`}\n          onClick={sortByAlphabet}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortType !== 2 && 'is-light'}`}\n          onClick={sortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-warning ${!isReversed && 'is-light'}`}\n          onClick={reverse}\n        >\n          Reverse\n        </button>\n\n        {(isReversed !== false || sortType !== 0) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={reset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <ul>\n        {reorderedGoods.map(\n          good => <li key={good} data-cy=\"Good\">{good}</li>,\n        )}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}